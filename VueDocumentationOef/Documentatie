
Start een Vue instance zo :

var vm = new Vue({
  // options
})

Je can ook componenten aanmaken:

var MyComponent = Vue.extend({
  // extension options
})

Deze componenten kan je initializeren op deze manier :

var myComponentInstance = new MyComponent()

Er dubbele data binding -> Als je 1 van de 2 aanpast past de andere zich sowieso ook aan.

vm.a === data.a -> true
vm.a = 3 -> data.a === 3 -> true + vice versa

$watch -> Met deze functie kan je een variabele "watchen", als deze veranderd kan je een functie oproepen.


lifecycle hooks -> De vue instance gaat door een hele boel initializeringen + Er zullen lifecycle hooks worden uitgevoerd die je zelf kan aanpassen met logica
bv : created, mounted, updated, and destroyed.

TEMPLATE SYNTAX

{{variable}} -> Dubbele moustache zal data tonen die de variabele bevat in de vue instance -> Als het de wijzigenen van de variabele niet mag tonen = v-once

Attributen worden gebruikt met v-bind, niet met de dubbele moustache -> v-bind:id='customid'

Je kan ook basis javascript expressies gebruiken in de html bv : {{number + 1}} & {{oke ? 'yes' : 'no'}}
Er zijn ook filters, die worden aangetoont met | bv : {{message | capitalize}} -> Je kan meerdere filters gebruiken bij 1 variabele + het moet altijd binnen {{}}

DIRECTIVES

Speciale attributen met V- ervoor. bv: v-if -> Sommige van deze directives nemen argumenten aan

Modfigiers: Deze worden aangetoont met een punt bv: .prevent -> event.preventdefault(). <form v-on:submit.prevent='onSubmit'></form> -> de default wordt niet uitgevoerd maar de submit functie wel.

Kleine short hands (deze zal je veel gebruiken dus het wordt afgekort):

v-bind:href="url" == :href="url"

v-on:click="function" == @click="function"

COMPUTED PROPERTIES

Zo weinig mogelijk logica in de html steken. Anders word de tamplate te onduidelijk bv:

<h1>{{ variable ? 'titel1' : 'titel2 '}}</h1>

Vervangen door:

<h1 id="example"> {{ returnTitle }} </h1>

var vm = new Vue({
  el: '#example',
  data: {
    variable: true
  },
  computed: {
    returnTitle: function () {
     	if(this.variable)
     	{
     	 return 'titel1';
     	}
     	else
     	{
     	return 'titel2'
     	}
    }
  }
})

Hier hebben we gebruik gemaakt van een computed propertie. De functie returnTitle() zal gebruikt worden als Getter functie om
de juiste titel te returnen. Als variable veranderd zal de returnTitle terug worden opgeroepen en zal de Titel dus ook veranderen.

Computed vs methods:

Als je het bovenste met een methode had gedaan zal je hetzelfde resultaat krijgen maar er is een verschil:

Een computed propertie wordt opgeroepen als een variabele waar hij afhankelijk van is (een dependencie) wordt gewijzigt.
Als deze niet wordt gewijzigt zal het gewoon de oude waarde returnen die hij heeft gecached -> de functie moet niet worden herhaald.
Als we het met een methode doen zal de functie steeds worden herhaald bij een rerender.

Computed vs Watched properties:

Een watch methode is vaak repeteties en onduidelijk, tegenover een computed propertie.

De computed getter hebben we nu gezien maar er zijn ook computed setters vb:

	computed:{

		title:{

			get: function()
			{
			return title;
			},

			set: function(newVal)
			{
			this.title = newVal;
			}
		}


	}

->vm.title = "niewe titel" = setter
->vm.title = getter

Als het programma iets ingewikkelder is en er moeten methodes worden opgeroepen wanneer er data veranderd is de Watch methode wel aangeraden.
Maar voor de rest moet een computed propertie normaal volstaan.

CLASS + STYLE bindings

Classes en id's zijn attributen -> v-bind bv: <h1 v-bind:id="id"></h1>

We kunnen ook dynamisch klassen toggelen -> v:bind:class="{ active: isActive, text-danger : hasError }"

Het klasse object moet niet inline zijn -> v:bind:class="classObject"
 
We kunnen ook een array van klassen meegeven v-bind:class='[klasse1, klasse2]'

Je kan ook style binden met vue -> v-bind:style="{ color: blue}";

CONDITIONAL RENDERING

vb:

<p v-if = "ok">Yes</p>
<p v-else > No</p>

Dit is voor 1 element. Voor meerdere elementen moet de v-if aan een template worden gekoppelt

<template v-if='ok'>
		
		html elements

</template>

v-else moet direct na v-if komen anders werkt het niet

Je kan ook werken met v-show maar er is een verschil:

v-show wordt sowieso gerenderd in de DOM maar toggled gewoon de display functie van css, met v-if wordt het element conditioneel
in de DOM geladen

Wat is het beste om te gebruiken ?

v-show is trage bij het rederen van de pagina maar sneller bij het toggelen.
v-if is sneller bij het renderen van de pagina maar trager bij het toggelen.

LIST RENDERING

for lus = v-for='item in items'
items is de variabele, item is de alias

v-for="(item, index) in items" -> index stelt de index voor van de item in de items

V-for kan ook door een object -> v-for="value in object"
een extra argument kan ook -> v-for="(key, value) in object" & zelfs v-for="(key, value, index) in object"

key

Het is aangeraden een key mee te geven aan aan je list -> v-for='item in itmes' :key="item.id"
Dit is aangeraden als er nog child components komen of een tijdelijke DOM status.

Array manipulation

push()
pop()
shift()
unshift()
splice()
sort()
reverse()

Bij deze methode wordt de array gwijzigt

functies zoals filter() concat() en slice() zijn functies waarbij er een nieuwe array word aangemaakt en de 
orginele array dus niet wordt aangepast. Dit is redelijk logisch

Caveats. Er zijn 2 zaken die niet herkent worden door vue maar wel logisch lijken
1 : vm.items[index] = newVulue;

Oplossing ->  vm.set(example1.items, index, newValue);
of        ->  example1.items.splice(index,1,newValue);

2 : vm.items.length = newLength;

Oplossing -> example1.items.splice(newLength);

Array fileren

Je kan ook een array filteren de beste manier om dit te doen is met een computed propertie of met een methode.

dan doe je v-for="n in evennumbers" of v-for="n in evenize(numbers)"

methods:{
    evenize:function(list){
      return list.filter(function(number){
        return number % 2 ===0;
      })
    },
  },

  computed:{
    evenNumbers:function()
    {
      return this.numbers.filter(function(number){
        return number % 2 === 0;
      })
    }
  }

EVENT HANDLING

Beglangrijk = v-on

Dit kan zowel een expressie : <button v-on:click='counter+=1'> counter </button>
als een methode oproepen : <button v-on:click="function"> </button>

Soms willen we een info van de DOM opvragen bij een functie, dit kan je doen met de $event variabele
-> v-on:click="function, $event" -> function(even){event.preventDefault()};

Event modifiers

Het is beter om de preventdefault in de html te zetten en de js op pure logica te houden
Vue heeft een aantal event modifiers om dit te doen, ze worden aangetoont met een punt.

.stop
.prevent
.capture
.self

<form v-on:submit.prevent="onSubmit"></form> De reload zal hierdoor niet gebeuren.

Er zijn ook key modifiers vn v-on:keyup.13="submit" voor de meeste keycodes heeft vue een alias
 .enter bijvoorbeeld

enter
tab
delete (captures both “Delete” and “Backspace” keys)
esc
space
up
down
left
right

FORM INPUT BINDINGS

v-model kiest zelf de juiste manier om de data te updaten gebaseert op het input type.

-multiline text
  met een textarea kun je meerdere lijnen text maken.

Je kan zelfs meerdere checkboxen binden aan dezelfde array ->
De array wordt dan gevult met de data van de checkbox. 

Hetzelfde gaat met radiobuttons en met select

Select kan ook gerenderd worden met een v-for
  
  <select v-model="selected">

    <option v-for="option in options" v:bind:value="option.value">
      {{option.text}}
    </option>


  </select>

  data: {
    selected: 'A',
    options: [
      { text: 'One', value: 'A' },
      { text: 'Two', value: 'B' },
      { text: 'Three', value: 'C' }
    ]
  }

De radio, select en checkbox values hangen meestal vast aan een constante string vb <input type="checkbox" v-model="selected" value="test">

Maar soms willen we ze vast hangen aan een dynamische value-> dan werken we met v-bind:value="variable"

Modifiers

Om te syncen na een change event ipv een input event kan je .lazy gebruiken -> v-model.lazy="var"

Als je de inputdata direct wil typecasten naar een number kan je .number gebruiken

Als je de data meteen wilt trimmen kan je .trim gebruiken.

COMPONENTEN

Met componenten kan je logica en html kan hergebruiken.

Hoe gebruiken:
  registreren

  Vue.component('mijn-component', {

  })

  Nu kan deze component gebruikt worden als html object ->  <mijn-component></mijn-component>

  Bovenstaande component is globaal gedeclareerd maar dit kan ook lokaal

  new Vue({
    ...
    components:{
      'mijn-component': {
        template: '<p>test</p>'
      }
    }
  })

  Uitzonderingen

In sommige html tags kunnen geen custom components komen, dit heeft te maken met de rendering van de DOM
een paar van die tags zijn :table, select, ul, ol, option

Een workaround is dit :

ipv:  <table>
        <my-row></my-row>
      </table>

dit:  <table>
        <tr is="my-row"></tr>
      </table>

-Data moet een functie zijn bij componenten
  dus ipv 
    Vue.component('my-component', {

      template: '<span>{{ message }}</span>',

      data: {
        message: 'hello'
      }
    })

  dit: 


    Vue.component('my-component', {
      template: '<span>{{ message }}</span>',
     
      data: function () {
        return 'hello'
      }
    })


-We kunnen componenten in elkaar gebruiken. Vue is ook gemaakt om dit te doen.
Om een goede communicatie te hebben tussen 2 componenten parent -> child en toch de componenten zo gescheide mogelijk te houden heeft
Vue wat methodes.
 Communicatie van parent naar child is via Props
 Communicatie van child naar parent is via Events

 Props:

  Vue.component("child", {
    props: ["message"],
    template: "<p>{{message}}</p>"
  })

  <child message = "my message"></child>

  Je kan ook dynamische props gebruiken

  <input v-model="parentMessage"></input>

  <child v-bind:message="parendMessage"></child>

  Als we een nummer willen doorgeven moeten we ook met Bind werken anders wordt de nummer doorgegeven als een string

  Props gaan maar 1 weg. Als de parent data veranderd veranderd de child data vanzelf ook en wordt het gerefresht
  maar probeer in de child de prop value niet te wijzigen.

  Als die wel moet kan je een locale data propertie aanmaken en die data gelijk zetten aan de value van de propertie of een computed propertie aanmaken
  en die gelijk zetten aan de value van de propertie.

  Je kan props ook validatie meegeven. Zodat er een warning komt als validatie niet klopt
  De props wordt dan een object ipv een array
    props:{
        propA: Number,
        propB: [String, Number],
        propC: {
        type: Object,
        default: function () {
          return { message: 'hello' }
        }
    }

  Custom events:

  Om data van de child terug te brengen naar de parent.
  Met de $emit('emitName') kan je info terug brengen naar de parent

  de nu kan je bij de parente v-on:emitName="function" toevoegen
  De parent zal dus reageren als het child iets emit

  Form input componenten met custom events zijn wat ingewikkelder

  bij v-model="var" hangt de var vanzelf samen met de var in het script en is er 2 way binding

  het is hetzelfde als  v-bind:value="var" v-on:input="var = $event.target.value"

  Dus als we v-model willen gebruiken bij een custom component zullen we een value propertie moeten hebben en een
  input event met de input value

   dus -> this.$emit('input', event.target.value) bij elke input -> v-on:input
    en -> props : [value] met -> v-bind:value="value"

-not parend child communication

hiervoor kan je een nieuwe lege vue instance aanmaken

var bus = new Vue();

in component A
  
  bus.$emit("idselected", 2);

in component B
  
  bus.$on("idselected", function(id){

  })

-Scope
  Alles in de parent template is van de parent scope, alles in de child template is in de child scope
  deze fout wordt veel gemaakt:

  <child-component v-show="someChildProperty"></child-component>

  De someChildProperty staat in de parent template dus zal niet herkent worden.

-Single slot
  
  <slot> geeft de waarde weer dat de parent tussen de tags heeft gezet. Hiervoor kan je plaats maken in de component template
    als je dit niet doet worde de parent data verwijderd.

-names slots

  je kan je slot ook een naam geven
    <slot name="header">fallbeck header content</slot>

  de parent kan dit dan accesen met
    <h1 slot="header"> parent header </h1>

- dynamic components

  In de parent kan je met 1 mount point gebruik maken van verschillende components

  <component v-bind:is="component name";

  Als je er wil voor zorgen dat de state wordt onthouden van voorgaande componenten na een switch
  kan je dit doen door de dynamic component te wrappen in een <keep-alive> tag
















































